type Account = record { owner : principal; subaccount : opt vec nat8 };
type Gardener = record {
  contestEntry : vec Plant;
  plants : vec Plant;
  info : GardenerInfo;
  productsAvailable : vec ProductsAvailable;
};
type GardenerInfo = record { id : principal; contact : text; name : text };
type ManualReply = variant { Ok : int; Err : text };
type ManualReply_1 = variant { Ok : TransferResult; Err : text };
type Plant = record { info : PlantInfo; quantity : nat16 };
type PlantInfo = record { plantName : text; details : vec nat8 };
type ProductsAvailable = record { productName : text; quantity : nat16 };
type TransferError = variant {
  GenericError : _InlineTransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineTransferErrorBadBurn;
  Duplicate : _InlineTransferErrorDuplicate;
  BadFee : _InlineTransferErrorBadFee;
  CreatedInFuture : _InlineTransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineTransferErrorInsufficientFunds;
};
type TransferResult = variant { Ok : nat; Err : TransferError };
type _InlineTransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineTransferErrorBadFee = record { expected_fee : nat };
type _InlineTransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineTransferErrorDuplicate = record { duplicate_of : nat };
type _InlineTransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineTransferErrorInsufficientFunds = record { balance : nat };
service : () -> {
  addPlant : (principal, PlantInfo, nat16) -> ();
  createGardener : (GardenerInfo) -> ();
  deleteGardener : (principal) -> ();
  deletePlant : (principal, text) -> ();
  getBalance : (Account) -> (ManualReply) query;
  getGardener : (principal) -> (opt Gardener) query;
  getGardeners : () -> (vec Gardener) query;
  getIcrcName : () -> (text) query;
  getIcrcSymbol : () -> (text) query;
  mintTokens : (Account, nat) -> (ManualReply_1);
  principalCaller : () -> (principal) query;
}